// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostMetadataTagTagImageImagenameParams creates a new PostMetadataTagTagImageImagenameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostMetadataTagTagImageImagenameParams() *PostMetadataTagTagImageImagenameParams {
	return &PostMetadataTagTagImageImagenameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostMetadataTagTagImageImagenameParamsWithTimeout creates a new PostMetadataTagTagImageImagenameParams object
// with the ability to set a timeout on a request.
func NewPostMetadataTagTagImageImagenameParamsWithTimeout(timeout time.Duration) *PostMetadataTagTagImageImagenameParams {
	return &PostMetadataTagTagImageImagenameParams{
		timeout: timeout,
	}
}

// NewPostMetadataTagTagImageImagenameParamsWithContext creates a new PostMetadataTagTagImageImagenameParams object
// with the ability to set a context for a request.
func NewPostMetadataTagTagImageImagenameParamsWithContext(ctx context.Context) *PostMetadataTagTagImageImagenameParams {
	return &PostMetadataTagTagImageImagenameParams{
		Context: ctx,
	}
}

// NewPostMetadataTagTagImageImagenameParamsWithHTTPClient creates a new PostMetadataTagTagImageImagenameParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostMetadataTagTagImageImagenameParamsWithHTTPClient(client *http.Client) *PostMetadataTagTagImageImagenameParams {
	return &PostMetadataTagTagImageImagenameParams{
		HTTPClient: client,
	}
}

/* PostMetadataTagTagImageImagenameParams contains all the parameters to send to the API endpoint
   for the post metadata tag tag image imagename operation.

   Typically these are written to a http.Request.
*/
type PostMetadataTagTagImageImagenameParams struct {

	// KeyValue.
	KeyValue PostMetadataTagTagImageImagenameBody

	// Imagename.
	Imagename string

	// Tag.
	Tag string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post metadata tag tag image imagename params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostMetadataTagTagImageImagenameParams) WithDefaults() *PostMetadataTagTagImageImagenameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post metadata tag tag image imagename params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostMetadataTagTagImageImagenameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) WithTimeout(timeout time.Duration) *PostMetadataTagTagImageImagenameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) WithContext(ctx context.Context) *PostMetadataTagTagImageImagenameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) WithHTTPClient(client *http.Client) *PostMetadataTagTagImageImagenameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeyValue adds the keyValue to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) WithKeyValue(keyValue PostMetadataTagTagImageImagenameBody) *PostMetadataTagTagImageImagenameParams {
	o.SetKeyValue(keyValue)
	return o
}

// SetKeyValue adds the keyValue to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) SetKeyValue(keyValue PostMetadataTagTagImageImagenameBody) {
	o.KeyValue = keyValue
}

// WithImagename adds the imagename to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) WithImagename(imagename string) *PostMetadataTagTagImageImagenameParams {
	o.SetImagename(imagename)
	return o
}

// SetImagename adds the imagename to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) SetImagename(imagename string) {
	o.Imagename = imagename
}

// WithTag adds the tag to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) WithTag(tag string) *PostMetadataTagTagImageImagenameParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the post metadata tag tag image imagename params
func (o *PostMetadataTagTagImageImagenameParams) SetTag(tag string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *PostMetadataTagTagImageImagenameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.KeyValue); err != nil {
		return err
	}

	// path param imagename
	if err := r.SetPathParam("imagename", o.Imagename); err != nil {
		return err
	}

	// path param tag
	if err := r.SetPathParam("tag", o.Tag); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
