// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the metadata client
type API interface {
	/*
	   DeleteMetadataTagTagImageImagename removes key from metadata

	   Remove metadata key*/
	DeleteMetadataTagTagImageImagename(ctx context.Context, params *DeleteMetadataTagTagImageImagenameParams) (*DeleteMetadataTagTagImageImagenameOK, error)
	/*
	   GetMetadataTagTagImageImagename gets metadata*/
	GetMetadataTagTagImageImagename(ctx context.Context, params *GetMetadataTagTagImageImagenameParams) (*GetMetadataTagTagImageImagenameOK, error)
	/*
	   PostMetadataTagTagImageImagename creates new key in metadata

	   Create new metadata key and (optional) new default value*/
	PostMetadataTagTagImageImagename(ctx context.Context, params *PostMetadataTagTagImageImagenameParams) (*PostMetadataTagTagImageImagenameCreated, error)
	/*
	   PutMetadataTagTagImageImagename updates default value of specified key

	   Update default value of specified key*/
	PutMetadataTagTagImageImagename(ctx context.Context, params *PutMetadataTagTagImageImagenameParams) (*PutMetadataTagTagImageImagenameOK, error)
}

// New creates a new metadata API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for metadata API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteMetadataTagTagImageImagename removes key from metadata

Remove metadata key
*/
func (a *Client) DeleteMetadataTagTagImageImagename(ctx context.Context, params *DeleteMetadataTagTagImageImagenameParams) (*DeleteMetadataTagTagImageImagenameOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMetadataTagTagImageImagename",
		Method:             "DELETE",
		PathPattern:        "/metadata/tag/{tag}/image/{imagename}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMetadataTagTagImageImagenameReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMetadataTagTagImageImagenameOK), nil

}

/*
GetMetadataTagTagImageImagename gets metadata
*/
func (a *Client) GetMetadataTagTagImageImagename(ctx context.Context, params *GetMetadataTagTagImageImagenameParams) (*GetMetadataTagTagImageImagenameOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMetadataTagTagImageImagename",
		Method:             "GET",
		PathPattern:        "/metadata/tag/{tag}/image/{imagename}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetadataTagTagImageImagenameReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMetadataTagTagImageImagenameOK), nil

}

/*
PostMetadataTagTagImageImagename creates new key in metadata

Create new metadata key and (optional) new default value
*/
func (a *Client) PostMetadataTagTagImageImagename(ctx context.Context, params *PostMetadataTagTagImageImagenameParams) (*PostMetadataTagTagImageImagenameCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMetadataTagTagImageImagename",
		Method:             "POST",
		PathPattern:        "/metadata/tag/{tag}/image/{imagename}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostMetadataTagTagImageImagenameReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMetadataTagTagImageImagenameCreated), nil

}

/*
PutMetadataTagTagImageImagename updates default value of specified key

Update default value of specified key
*/
func (a *Client) PutMetadataTagTagImageImagename(ctx context.Context, params *PutMetadataTagTagImageImagenameParams) (*PutMetadataTagTagImageImagenameOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMetadataTagTagImageImagename",
		Method:             "PUT",
		PathPattern:        "/metadata/tag/{tag}/image/{imagename}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutMetadataTagTagImageImagenameReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMetadataTagTagImageImagenameOK), nil

}
