// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the images client
type API interface {
	/*
	   DeleteMetadataImage unregisters image fron metadata service

	   All tags and metadata will be removed*/
	DeleteMetadataImage(ctx context.Context, params *DeleteMetadataImageParams) (*DeleteMetadataImageOK, error)
	/*
	   GetMetadataImage lists of registered images in the metadata service*/
	GetMetadataImage(ctx context.Context, params *GetMetadataImageParams) (*GetMetadataImageOK, error)
	/*
	   PostMetadataImage registers image with tag

	   Register and verify if the image exists in docker registry*/
	PostMetadataImage(ctx context.Context, params *PostMetadataImageParams) (*PostMetadataImageCreated, error)
}

// New creates a new images API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for images API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
DeleteMetadataImage unregisters image fron metadata service

All tags and metadata will be removed
*/
func (a *Client) DeleteMetadataImage(ctx context.Context, params *DeleteMetadataImageParams) (*DeleteMetadataImageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMetadataImage",
		Method:             "DELETE",
		PathPattern:        "/metadata/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMetadataImageReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMetadataImageOK), nil

}

/*
GetMetadataImage lists of registered images in the metadata service
*/
func (a *Client) GetMetadataImage(ctx context.Context, params *GetMetadataImageParams) (*GetMetadataImageOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMetadataImage",
		Method:             "GET",
		PathPattern:        "/metadata/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetadataImageReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMetadataImageOK), nil

}

/*
PostMetadataImage registers image with tag

Register and verify if the image exists in docker registry
*/
func (a *Client) PostMetadataImage(ctx context.Context, params *PostMetadataImageParams) (*PostMetadataImageCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMetadataImage",
		Method:             "POST",
		PathPattern:        "/metadata/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostMetadataImageReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMetadataImageCreated), nil

}
