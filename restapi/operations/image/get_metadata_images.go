// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMetadataImagesHandlerFunc turns a function with the right signature into a get metadata images handler
type GetMetadataImagesHandlerFunc func(GetMetadataImagesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMetadataImagesHandlerFunc) Handle(params GetMetadataImagesParams) middleware.Responder {
	return fn(params)
}

// GetMetadataImagesHandler interface for that can handle valid get metadata images params
type GetMetadataImagesHandler interface {
	Handle(GetMetadataImagesParams) middleware.Responder
}

// NewGetMetadataImages creates a new http.Handler for the get metadata images operation
func NewGetMetadataImages(ctx *middleware.Context, handler GetMetadataImagesHandler) *GetMetadataImages {
	return &GetMetadataImages{Context: ctx, Handler: handler}
}

/* GetMetadataImages swagger:route GET /metadata/images Image getMetadataImages

List of registered images in the metadata service

*/
type GetMetadataImages struct {
	Context *middleware.Context
	Handler GetMetadataImagesHandler
}

func (o *GetMetadataImages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMetadataImagesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
