// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"docker_image_metadata_api/models"
)

// DeleteMetadataImageImageNameOKCode is the HTTP code returned for type DeleteMetadataImageImageNameOK
const DeleteMetadataImageImageNameOKCode int = 200

/*DeleteMetadataImageImageNameOK Removed successfully

swagger:response deleteMetadataImageImageNameOK
*/
type DeleteMetadataImageImageNameOK struct {
}

// NewDeleteMetadataImageImageNameOK creates DeleteMetadataImageImageNameOK with default headers values
func NewDeleteMetadataImageImageNameOK() *DeleteMetadataImageImageNameOK {

	return &DeleteMetadataImageImageNameOK{}
}

// WriteResponse to the client
func (o *DeleteMetadataImageImageNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteMetadataImageImageNameNotFoundCode is the HTTP code returned for type DeleteMetadataImageImageNameNotFound
const DeleteMetadataImageImageNameNotFoundCode int = 404

/*DeleteMetadataImageImageNameNotFound Any image not found in database

swagger:response deleteMetadataImageImageNameNotFound
*/
type DeleteMetadataImageImageNameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFoundResponse `json:"body,omitempty"`
}

// NewDeleteMetadataImageImageNameNotFound creates DeleteMetadataImageImageNameNotFound with default headers values
func NewDeleteMetadataImageImageNameNotFound() *DeleteMetadataImageImageNameNotFound {

	return &DeleteMetadataImageImageNameNotFound{}
}

// WithPayload adds the payload to the delete metadata image image name not found response
func (o *DeleteMetadataImageImageNameNotFound) WithPayload(payload *models.NotFoundResponse) *DeleteMetadataImageImageNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete metadata image image name not found response
func (o *DeleteMetadataImageImageNameNotFound) SetPayload(payload *models.NotFoundResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMetadataImageImageNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteMetadataImageImageNameInternalServerErrorCode is the HTTP code returned for type DeleteMetadataImageImageNameInternalServerError
const DeleteMetadataImageImageNameInternalServerErrorCode int = 500

/*DeleteMetadataImageImageNameInternalServerError Internal Error Message

swagger:response deleteMetadataImageImageNameInternalServerError
*/
type DeleteMetadataImageImageNameInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDeleteMetadataImageImageNameInternalServerError creates DeleteMetadataImageImageNameInternalServerError with default headers values
func NewDeleteMetadataImageImageNameInternalServerError() *DeleteMetadataImageImageNameInternalServerError {

	return &DeleteMetadataImageImageNameInternalServerError{}
}

// WithPayload adds the payload to the delete metadata image image name internal server error response
func (o *DeleteMetadataImageImageNameInternalServerError) WithPayload(payload *models.ErrorResponse) *DeleteMetadataImageImageNameInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete metadata image image name internal server error response
func (o *DeleteMetadataImageImageNameInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMetadataImageImageNameInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
