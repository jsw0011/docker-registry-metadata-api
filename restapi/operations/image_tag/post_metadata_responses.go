// Code generated by go-swagger; DO NOT EDIT.

package image_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"docker_image_metadata_api/models"
)

// PostMetadataCreatedCode is the HTTP code returned for type PostMetadataCreated
const PostMetadataCreatedCode int = 201

/*PostMetadataCreated Created

swagger:response postMetadataCreated
*/
type PostMetadataCreated struct {
}

// NewPostMetadataCreated creates PostMetadataCreated with default headers values
func NewPostMetadataCreated() *PostMetadataCreated {

	return &PostMetadataCreated{}
}

// WriteResponse to the client
func (o *PostMetadataCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// PostMetadataConflictCode is the HTTP code returned for type PostMetadataConflict
const PostMetadataConflictCode int = 409

/*PostMetadataConflict Image already exists

swagger:response postMetadataConflict
*/
type PostMetadataConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ConflictResponse `json:"body,omitempty"`
}

// NewPostMetadataConflict creates PostMetadataConflict with default headers values
func NewPostMetadataConflict() *PostMetadataConflict {

	return &PostMetadataConflict{}
}

// WithPayload adds the payload to the post metadata conflict response
func (o *PostMetadataConflict) WithPayload(payload *models.ConflictResponse) *PostMetadataConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post metadata conflict response
func (o *PostMetadataConflict) SetPayload(payload *models.ConflictResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMetadataConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostMetadataFailedDependencyCode is the HTTP code returned for type PostMetadataFailedDependency
const PostMetadataFailedDependencyCode int = 424

/*PostMetadataFailedDependency Failed Dependency

swagger:response postMetadataFailedDependency
*/
type PostMetadataFailedDependency struct {

	/*
	  In: Body
	*/
	Payload *models.FailedDependency `json:"body,omitempty"`
}

// NewPostMetadataFailedDependency creates PostMetadataFailedDependency with default headers values
func NewPostMetadataFailedDependency() *PostMetadataFailedDependency {

	return &PostMetadataFailedDependency{}
}

// WithPayload adds the payload to the post metadata failed dependency response
func (o *PostMetadataFailedDependency) WithPayload(payload *models.FailedDependency) *PostMetadataFailedDependency {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post metadata failed dependency response
func (o *PostMetadataFailedDependency) SetPayload(payload *models.FailedDependency) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMetadataFailedDependency) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(424)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostMetadataInternalServerErrorCode is the HTTP code returned for type PostMetadataInternalServerError
const PostMetadataInternalServerErrorCode int = 500

/*PostMetadataInternalServerError Internal Error Message

swagger:response postMetadataInternalServerError
*/
type PostMetadataInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPostMetadataInternalServerError creates PostMetadataInternalServerError with default headers values
func NewPostMetadataInternalServerError() *PostMetadataInternalServerError {

	return &PostMetadataInternalServerError{}
}

// WithPayload adds the payload to the post metadata internal server error response
func (o *PostMetadataInternalServerError) WithPayload(payload *models.ErrorResponse) *PostMetadataInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post metadata internal server error response
func (o *PostMetadataInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMetadataInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
