// Code generated by go-swagger; DO NOT EDIT.

package image_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostMetadataImageHandlerFunc turns a function with the right signature into a post metadata image handler
type PostMetadataImageHandlerFunc func(PostMetadataImageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostMetadataImageHandlerFunc) Handle(params PostMetadataImageParams) middleware.Responder {
	return fn(params)
}

// PostMetadataImageHandler interface for that can handle valid post metadata image params
type PostMetadataImageHandler interface {
	Handle(PostMetadataImageParams) middleware.Responder
}

// NewPostMetadataImage creates a new http.Handler for the post metadata image operation
func NewPostMetadataImage(ctx *middleware.Context, handler PostMetadataImageHandler) *PostMetadataImage {
	return &PostMetadataImage{Context: ctx, Handler: handler}
}

/* PostMetadataImage swagger:route POST /metadata/image ImageTag postMetadataImage

List of registered image tags in the metadata service

*/
type PostMetadataImage struct {
	Context *middleware.Context
	Handler PostMetadataImageHandler
}

func (o *PostMetadataImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostMetadataImageParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostMetadataImageBody post metadata image body
//
// swagger:model PostMetadataImageBody
type PostMetadataImageBody struct {

	// image name
	ImageName string `json:"ImageName,omitempty"`
}

// Validate validates this post metadata image body
func (o *PostMetadataImageBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post metadata image body based on context it is used
func (o *PostMetadataImageBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostMetadataImageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostMetadataImageBody) UnmarshalBinary(b []byte) error {
	var res PostMetadataImageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
