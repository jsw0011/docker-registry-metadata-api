// Code generated by go-swagger; DO NOT EDIT.

package image_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"docker_image_metadata_api/models"
)

// PostMetadataImageOKCode is the HTTP code returned for type PostMetadataImageOK
const PostMetadataImageOKCode int = 200

/*PostMetadataImageOK List of registered image tags in the metadata service

swagger:response postMetadataImageOK
*/
type PostMetadataImageOK struct {

	/*
	  In: Body
	*/
	Payload []string `json:"body,omitempty"`
}

// NewPostMetadataImageOK creates PostMetadataImageOK with default headers values
func NewPostMetadataImageOK() *PostMetadataImageOK {

	return &PostMetadataImageOK{}
}

// WithPayload adds the payload to the post metadata image o k response
func (o *PostMetadataImageOK) WithPayload(payload []string) *PostMetadataImageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post metadata image o k response
func (o *PostMetadataImageOK) SetPayload(payload []string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMetadataImageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]string, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostMetadataImageNotFoundCode is the HTTP code returned for type PostMetadataImageNotFound
const PostMetadataImageNotFoundCode int = 404

/*PostMetadataImageNotFound Image with tag not found

swagger:response postMetadataImageNotFound
*/
type PostMetadataImageNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFoundResponse `json:"body,omitempty"`
}

// NewPostMetadataImageNotFound creates PostMetadataImageNotFound with default headers values
func NewPostMetadataImageNotFound() *PostMetadataImageNotFound {

	return &PostMetadataImageNotFound{}
}

// WithPayload adds the payload to the post metadata image not found response
func (o *PostMetadataImageNotFound) WithPayload(payload *models.NotFoundResponse) *PostMetadataImageNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post metadata image not found response
func (o *PostMetadataImageNotFound) SetPayload(payload *models.NotFoundResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMetadataImageNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostMetadataImageInternalServerErrorCode is the HTTP code returned for type PostMetadataImageInternalServerError
const PostMetadataImageInternalServerErrorCode int = 500

/*PostMetadataImageInternalServerError Internal Error Message

swagger:response postMetadataImageInternalServerError
*/
type PostMetadataImageInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPostMetadataImageInternalServerError creates PostMetadataImageInternalServerError with default headers values
func NewPostMetadataImageInternalServerError() *PostMetadataImageInternalServerError {

	return &PostMetadataImageInternalServerError{}
}

// WithPayload adds the payload to the post metadata image internal server error response
func (o *PostMetadataImageInternalServerError) WithPayload(payload *models.ErrorResponse) *PostMetadataImageInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post metadata image internal server error response
func (o *PostMetadataImageInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostMetadataImageInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
