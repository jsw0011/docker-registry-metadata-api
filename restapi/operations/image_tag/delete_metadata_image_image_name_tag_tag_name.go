// Code generated by go-swagger; DO NOT EDIT.

package image_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteMetadataImageImageNameTagTagNameHandlerFunc turns a function with the right signature into a delete metadata image image name tag tag name handler
type DeleteMetadataImageImageNameTagTagNameHandlerFunc func(DeleteMetadataImageImageNameTagTagNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteMetadataImageImageNameTagTagNameHandlerFunc) Handle(params DeleteMetadataImageImageNameTagTagNameParams) middleware.Responder {
	return fn(params)
}

// DeleteMetadataImageImageNameTagTagNameHandler interface for that can handle valid delete metadata image image name tag tag name params
type DeleteMetadataImageImageNameTagTagNameHandler interface {
	Handle(DeleteMetadataImageImageNameTagTagNameParams) middleware.Responder
}

// NewDeleteMetadataImageImageNameTagTagName creates a new http.Handler for the delete metadata image image name tag tag name operation
func NewDeleteMetadataImageImageNameTagTagName(ctx *middleware.Context, handler DeleteMetadataImageImageNameTagTagNameHandler) *DeleteMetadataImageImageNameTagTagName {
	return &DeleteMetadataImageImageNameTagTagName{Context: ctx, Handler: handler}
}

/* DeleteMetadataImageImageNameTagTagName swagger:route DELETE /metadata/image/{ImageName}/tag/{TagName} ImageTag deleteMetadataImageImageNameTagTagName

Remove tag

Remove tag and all its metadata

*/
type DeleteMetadataImageImageNameTagTagName struct {
	Context *middleware.Context
	Handler DeleteMetadataImageImageNameTagTagNameHandler
}

func (o *DeleteMetadataImageImageNameTagTagName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteMetadataImageImageNameTagTagNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
