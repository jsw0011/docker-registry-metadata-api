// Code generated by go-swagger; DO NOT EDIT.

package image_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"docker_image_metadata_api/models"
)

// GetMetadataImageImageNameOKCode is the HTTP code returned for type GetMetadataImageImageNameOK
const GetMetadataImageImageNameOKCode int = 200

/*GetMetadataImageImageNameOK List of registered image tags in the metadata service

swagger:response getMetadataImageImageNameOK
*/
type GetMetadataImageImageNameOK struct {

	/*
	  In: Body
	*/
	Payload []string `json:"body,omitempty"`
}

// NewGetMetadataImageImageNameOK creates GetMetadataImageImageNameOK with default headers values
func NewGetMetadataImageImageNameOK() *GetMetadataImageImageNameOK {

	return &GetMetadataImageImageNameOK{}
}

// WithPayload adds the payload to the get metadata image image name o k response
func (o *GetMetadataImageImageNameOK) WithPayload(payload []string) *GetMetadataImageImageNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get metadata image image name o k response
func (o *GetMetadataImageImageNameOK) SetPayload(payload []string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMetadataImageImageNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]string, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetMetadataImageImageNameNotFoundCode is the HTTP code returned for type GetMetadataImageImageNameNotFound
const GetMetadataImageImageNameNotFoundCode int = 404

/*GetMetadataImageImageNameNotFound Image with tag not found

swagger:response getMetadataImageImageNameNotFound
*/
type GetMetadataImageImageNameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFoundResponse `json:"body,omitempty"`
}

// NewGetMetadataImageImageNameNotFound creates GetMetadataImageImageNameNotFound with default headers values
func NewGetMetadataImageImageNameNotFound() *GetMetadataImageImageNameNotFound {

	return &GetMetadataImageImageNameNotFound{}
}

// WithPayload adds the payload to the get metadata image image name not found response
func (o *GetMetadataImageImageNameNotFound) WithPayload(payload *models.NotFoundResponse) *GetMetadataImageImageNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get metadata image image name not found response
func (o *GetMetadataImageImageNameNotFound) SetPayload(payload *models.NotFoundResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMetadataImageImageNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetMetadataImageImageNameInternalServerErrorCode is the HTTP code returned for type GetMetadataImageImageNameInternalServerError
const GetMetadataImageImageNameInternalServerErrorCode int = 500

/*GetMetadataImageImageNameInternalServerError Internal Error Message

swagger:response getMetadataImageImageNameInternalServerError
*/
type GetMetadataImageImageNameInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetMetadataImageImageNameInternalServerError creates GetMetadataImageImageNameInternalServerError with default headers values
func NewGetMetadataImageImageNameInternalServerError() *GetMetadataImageImageNameInternalServerError {

	return &GetMetadataImageImageNameInternalServerError{}
}

// WithPayload adds the payload to the get metadata image image name internal server error response
func (o *GetMetadataImageImageNameInternalServerError) WithPayload(payload *models.ErrorResponse) *GetMetadataImageImageNameInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get metadata image image name internal server error response
func (o *GetMetadataImageImageNameInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetMetadataImageImageNameInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
