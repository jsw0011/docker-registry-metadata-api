// Code generated by go-swagger; DO NOT EDIT.

package image_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMetadataImageImageNameHandlerFunc turns a function with the right signature into a get metadata image image name handler
type GetMetadataImageImageNameHandlerFunc func(GetMetadataImageImageNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMetadataImageImageNameHandlerFunc) Handle(params GetMetadataImageImageNameParams) middleware.Responder {
	return fn(params)
}

// GetMetadataImageImageNameHandler interface for that can handle valid get metadata image image name params
type GetMetadataImageImageNameHandler interface {
	Handle(GetMetadataImageImageNameParams) middleware.Responder
}

// NewGetMetadataImageImageName creates a new http.Handler for the get metadata image image name operation
func NewGetMetadataImageImageName(ctx *middleware.Context, handler GetMetadataImageImageNameHandler) *GetMetadataImageImageName {
	return &GetMetadataImageImageName{Context: ctx, Handler: handler}
}

/* GetMetadataImageImageName swagger:route GET /metadata/image/{ImageName} ImageTag getMetadataImageImageName

List of registered image tags in the metadata service

*/
type GetMetadataImageImageName struct {
	Context *middleware.Context
	Handler GetMetadataImageImageNameHandler
}

func (o *GetMetadataImageImageName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMetadataImageImageNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
