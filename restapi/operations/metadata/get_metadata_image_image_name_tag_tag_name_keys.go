// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetMetadataImageImageNameTagTagNameKeysHandlerFunc turns a function with the right signature into a get metadata image image name tag tag name keys handler
type GetMetadataImageImageNameTagTagNameKeysHandlerFunc func(GetMetadataImageImageNameTagTagNameKeysParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMetadataImageImageNameTagTagNameKeysHandlerFunc) Handle(params GetMetadataImageImageNameTagTagNameKeysParams) middleware.Responder {
	return fn(params)
}

// GetMetadataImageImageNameTagTagNameKeysHandler interface for that can handle valid get metadata image image name tag tag name keys params
type GetMetadataImageImageNameTagTagNameKeysHandler interface {
	Handle(GetMetadataImageImageNameTagTagNameKeysParams) middleware.Responder
}

// NewGetMetadataImageImageNameTagTagNameKeys creates a new http.Handler for the get metadata image image name tag tag name keys operation
func NewGetMetadataImageImageNameTagTagNameKeys(ctx *middleware.Context, handler GetMetadataImageImageNameTagTagNameKeysHandler) *GetMetadataImageImageNameTagTagNameKeys {
	return &GetMetadataImageImageNameTagTagNameKeys{Context: ctx, Handler: handler}
}

/* GetMetadataImageImageNameTagTagNameKeys swagger:route GET /metadata/image/{ImageName}/tag/{TagName}/keys Metadata getMetadataImageImageNameTagTagNameKeys

Get metadata

*/
type GetMetadataImageImageNameTagTagNameKeys struct {
	Context *middleware.Context
	Handler GetMetadataImageImageNameTagTagNameKeysHandler
}

func (o *GetMetadataImageImageNameTagTagNameKeys) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMetadataImageImageNameTagTagNameKeysParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
