// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"docker_image_metadata_api/models"
)

// DeleteMetadataImageTagKeysOKCode is the HTTP code returned for type DeleteMetadataImageTagKeysOK
const DeleteMetadataImageTagKeysOKCode int = 200

/*DeleteMetadataImageTagKeysOK Successfully removed

swagger:response deleteMetadataImageTagKeysOK
*/
type DeleteMetadataImageTagKeysOK struct {
}

// NewDeleteMetadataImageTagKeysOK creates DeleteMetadataImageTagKeysOK with default headers values
func NewDeleteMetadataImageTagKeysOK() *DeleteMetadataImageTagKeysOK {

	return &DeleteMetadataImageTagKeysOK{}
}

// WriteResponse to the client
func (o *DeleteMetadataImageTagKeysOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteMetadataImageTagKeysNotFoundCode is the HTTP code returned for type DeleteMetadataImageTagKeysNotFound
const DeleteMetadataImageTagKeysNotFoundCode int = 404

/*DeleteMetadataImageTagKeysNotFound Not Found

swagger:response deleteMetadataImageTagKeysNotFound
*/
type DeleteMetadataImageTagKeysNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFoundResponse `json:"body,omitempty"`
}

// NewDeleteMetadataImageTagKeysNotFound creates DeleteMetadataImageTagKeysNotFound with default headers values
func NewDeleteMetadataImageTagKeysNotFound() *DeleteMetadataImageTagKeysNotFound {

	return &DeleteMetadataImageTagKeysNotFound{}
}

// WithPayload adds the payload to the delete metadata image tag keys not found response
func (o *DeleteMetadataImageTagKeysNotFound) WithPayload(payload *models.NotFoundResponse) *DeleteMetadataImageTagKeysNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete metadata image tag keys not found response
func (o *DeleteMetadataImageTagKeysNotFound) SetPayload(payload *models.NotFoundResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMetadataImageTagKeysNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteMetadataImageTagKeysInternalServerErrorCode is the HTTP code returned for type DeleteMetadataImageTagKeysInternalServerError
const DeleteMetadataImageTagKeysInternalServerErrorCode int = 500

/*DeleteMetadataImageTagKeysInternalServerError Internal Error Message

swagger:response deleteMetadataImageTagKeysInternalServerError
*/
type DeleteMetadataImageTagKeysInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDeleteMetadataImageTagKeysInternalServerError creates DeleteMetadataImageTagKeysInternalServerError with default headers values
func NewDeleteMetadataImageTagKeysInternalServerError() *DeleteMetadataImageTagKeysInternalServerError {

	return &DeleteMetadataImageTagKeysInternalServerError{}
}

// WithPayload adds the payload to the delete metadata image tag keys internal server error response
func (o *DeleteMetadataImageTagKeysInternalServerError) WithPayload(payload *models.ErrorResponse) *DeleteMetadataImageTagKeysInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete metadata image tag keys internal server error response
func (o *DeleteMetadataImageTagKeysInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteMetadataImageTagKeysInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
