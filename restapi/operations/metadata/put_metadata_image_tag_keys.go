// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutMetadataImageTagKeysHandlerFunc turns a function with the right signature into a put metadata image tag keys handler
type PutMetadataImageTagKeysHandlerFunc func(PutMetadataImageTagKeysParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutMetadataImageTagKeysHandlerFunc) Handle(params PutMetadataImageTagKeysParams) middleware.Responder {
	return fn(params)
}

// PutMetadataImageTagKeysHandler interface for that can handle valid put metadata image tag keys params
type PutMetadataImageTagKeysHandler interface {
	Handle(PutMetadataImageTagKeysParams) middleware.Responder
}

// NewPutMetadataImageTagKeys creates a new http.Handler for the put metadata image tag keys operation
func NewPutMetadataImageTagKeys(ctx *middleware.Context, handler PutMetadataImageTagKeysHandler) *PutMetadataImageTagKeys {
	return &PutMetadataImageTagKeys{Context: ctx, Handler: handler}
}

/* PutMetadataImageTagKeys swagger:route PUT /metadata/image/tag/keys Metadata putMetadataImageTagKeys

Update default value of specified key

Update default value of specified key

*/
type PutMetadataImageTagKeys struct {
	Context *middleware.Context
	Handler PutMetadataImageTagKeysHandler
}

func (o *PutMetadataImageTagKeys) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutMetadataImageTagKeysParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutMetadataImageTagKeysBody put metadata image tag keys body
//
// swagger:model PutMetadataImageTagKeysBody
type PutMetadataImageTagKeysBody struct {

	// default value
	Value string `json:"Value,omitempty"`

	// image name
	ImageName string `json:"ImageName,omitempty"`

	// key
	Key string `json:"Key,omitempty"`

	// tag name
	TagName string `json:"TagName,omitempty"`
}

// Validate validates this put metadata image tag keys body
func (o *PutMetadataImageTagKeysBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put metadata image tag keys body based on context it is used
func (o *PutMetadataImageTagKeysBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutMetadataImageTagKeysBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutMetadataImageTagKeysBody) UnmarshalBinary(b []byte) error {
	var res PutMetadataImageTagKeysBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
