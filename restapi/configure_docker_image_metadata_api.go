// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"

	"docker_image_metadata_api/restapi/operations"
	"docker_image_metadata_api/restapi/operations/image"
	"docker_image_metadata_api/restapi/operations/image_tag"
	"docker_image_metadata_api/restapi/operations/metadata"
)

type contextKey string

const AuthKey contextKey = "Auth"

//go:generate mockery -name ImageAPI -inpkg

/* ImageAPI  */
type ImageAPI interface {
	/* DeleteMetadataImage Unregister image from metadata database */
	DeleteMetadataImage(ctx context.Context, params image.DeleteMetadataImageParams) middleware.Responder

	/* GetMetadataImages List of registered images in the metadata service */
	GetMetadataImages(ctx context.Context, params image.GetMetadataImagesParams) middleware.Responder
}

//go:generate mockery -name ImageTagAPI -inpkg

/* ImageTagAPI  */
type ImageTagAPI interface {
	/* DeleteMetadataImageTag Remove tag */
	DeleteMetadataImageTag(ctx context.Context, params image_tag.DeleteMetadataImageTagParams) middleware.Responder

	/* PostMetadata Register image with tag */
	PostMetadata(ctx context.Context, params image_tag.PostMetadataParams) middleware.Responder

	/* PostMetadataImage List of registered image tags in the metadata service */
	PostMetadataImage(ctx context.Context, params image_tag.PostMetadataImageParams) middleware.Responder
}

//go:generate mockery -name MetadataAPI -inpkg

/* MetadataAPI  */
type MetadataAPI interface {
	/* DeleteMetadataImageTagKeys Remove key from metadata */
	DeleteMetadataImageTagKeys(ctx context.Context, params metadata.DeleteMetadataImageTagKeysParams) middleware.Responder

	/* PostMetadataImageTag Get metadata */
	PostMetadataImageTag(ctx context.Context, params metadata.PostMetadataImageTagParams) middleware.Responder

	/* PostMetadataImageTagKeys Create new key in metadata */
	PostMetadataImageTagKeys(ctx context.Context, params metadata.PostMetadataImageTagKeysParams) middleware.Responder

	/* PutMetadataImageTagKeys Update default value of specified key */
	PutMetadataImageTagKeys(ctx context.Context, params metadata.PutMetadataImageTagKeysParams) middleware.Responder
}

// Config is configuration for Handler
type Config struct {
	ImageAPI
	ImageTagAPI
	MetadataAPI
	Logger func(string, ...interface{})
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request) error

	// Authenticator to use for all APIKey authentication
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// Authenticator to use for all Bearer authentication
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// Authenticator to use for all Basic authentication
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Config) (http.Handler, error) {
	h, _, err := HandlerAPI(c)
	return h, err
}

// HandlerAPI returns an http.Handler given the handler configuration
// and the corresponding *DockerImageMetadataAPI instance.
// It mounts all the business logic implementers in the right routing.
func HandlerAPI(c Config) (http.Handler, *operations.DockerImageMetadataAPIAPI, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewDockerImageMetadataAPIAPI(spec)
	api.ServeError = errors.ServeError
	api.Logger = c.Logger

	if c.APIKeyAuthenticator != nil {
		api.APIKeyAuthenticator = c.APIKeyAuthenticator
	}
	if c.BasicAuthenticator != nil {
		api.BasicAuthenticator = c.BasicAuthenticator
	}
	if c.BearerAuthenticator != nil {
		api.BearerAuthenticator = c.BearerAuthenticator
	}

	api.JSONConsumer = runtime.JSONConsumer()
	api.JSONProducer = runtime.JSONProducer()
	api.ImageDeleteMetadataImageHandler = image.DeleteMetadataImageHandlerFunc(func(params image.DeleteMetadataImageParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.ImageAPI.DeleteMetadataImage(ctx, params)
	})
	api.ImageTagDeleteMetadataImageTagHandler = image_tag.DeleteMetadataImageTagHandlerFunc(func(params image_tag.DeleteMetadataImageTagParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.ImageTagAPI.DeleteMetadataImageTag(ctx, params)
	})
	api.MetadataDeleteMetadataImageTagKeysHandler = metadata.DeleteMetadataImageTagKeysHandlerFunc(func(params metadata.DeleteMetadataImageTagKeysParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.MetadataAPI.DeleteMetadataImageTagKeys(ctx, params)
	})
	api.ImageGetMetadataImagesHandler = image.GetMetadataImagesHandlerFunc(func(params image.GetMetadataImagesParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.ImageAPI.GetMetadataImages(ctx, params)
	})
	api.ImageTagPostMetadataHandler = image_tag.PostMetadataHandlerFunc(func(params image_tag.PostMetadataParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.ImageTagAPI.PostMetadata(ctx, params)
	})
	api.ImageTagPostMetadataImageHandler = image_tag.PostMetadataImageHandlerFunc(func(params image_tag.PostMetadataImageParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.ImageTagAPI.PostMetadataImage(ctx, params)
	})
	api.MetadataPostMetadataImageTagHandler = metadata.PostMetadataImageTagHandlerFunc(func(params metadata.PostMetadataImageTagParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.MetadataAPI.PostMetadataImageTag(ctx, params)
	})
	api.MetadataPostMetadataImageTagKeysHandler = metadata.PostMetadataImageTagKeysHandlerFunc(func(params metadata.PostMetadataImageTagKeysParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.MetadataAPI.PostMetadataImageTagKeys(ctx, params)
	})
	api.MetadataPutMetadataImageTagKeysHandler = metadata.PutMetadataImageTagKeysHandlerFunc(func(params metadata.PutMetadataImageTagKeysParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.MetadataAPI.PutMetadataImageTagKeys(ctx, params)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), api, nil
}

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	ctx := storeAuth(req.Context(), principal)
	return a(req.WithContext(ctx))
}

func storeAuth(ctx context.Context, principal interface{}) context.Context {
	return context.WithValue(ctx, AuthKey, principal)
}
